(in-package #:org.shirakumo.random-sampling)

(random-state:define-generator hammersley-2 32 (random-state:stateful-generator)
    ((step 0 :type (unsigned-byte 32))
     (seeds (make-array 2 :element-type '(unsigned-byte 32) :initial-element 0) :type (simple-array (unsigned-byte 32) (2)))
     (leap (make-array 2 :element-type '(unsigned-byte 32) :initial-element 1) :type (simple-array (unsigned-byte 32) (2))))
  (:reseed
   (setf step 0)
   (fill leap 1)
   (setf (aref seeds 0) (ldb (byte 32 0) seed))
   (setf (aref seeds 1) (ldb (byte 32 32) seed)))
  (:next
   (prog1 (flet ((dim (base leap seed)
                   (let ((seed2 (+ seed (* step leap)))
                         (base-inv (float (/ base) 0f0))
                         (r 0.0))
                     (loop while (/= 0 seed2)
                           do (incf r (* (mod seed2 base) base-inv))
                              (setf base-inv (/ base-inv base))
                              (setf seed2 (/ seed2 base))
                           finally (return r)))))
            (vec (dim 2 (aref leap 0) (aref seeds 0))
                 (dim 3 (aref leap 1) (aref seeds 1))))
     (incf step))))

(random-state:define-generator hammersley-3 32 (random-state:stateful-generator)
    ((step 0 :type (unsigned-byte 32))
     (seeds (make-array 3 :element-type '(unsigned-byte 32) :initial-element 0) :type (simple-array (unsigned-byte 32) (3)))
     (leap (make-array 3 :element-type '(unsigned-byte 32) :initial-element 1) :type (simple-array (unsigned-byte 32) (3))))
  (:reseed
   (setf step 0)
   (fill leap 1)
   (setf (aref seeds 0) (ldb (byte 16 0) seed))
   (setf (aref seeds 1) (ldb (byte 16 16) seed))
   (setf (aref seeds 2) (ldb (byte 16 32) seed)))
  (:next
   (prog1 (flet ((dim (base leap seed)
                   (let ((seed2 (+ seed (* step leap)))
                         (base-inv (float (/ base) 0f0))
                         (r 0.0))
                     (loop while (/= 0 seed2)
                           do (incf r (* (mod seed2 base) base-inv))
                              (setf base-inv (/ base-inv base))
                              (setf seed2 (/ seed2 base))
                           finally (return r)))))
            (vec (dim 2 (aref leap 0) (aref seeds 0))
                 (dim 3 (aref leap 1) (aref seeds 1))
                 (dim 5 (aref leap 2) (aref seeds 2))))
     (incf step))))
